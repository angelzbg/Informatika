<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1251">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="BashScriptingTutorial_files/filelist.xml">
<title>Bash Scripting Tutorial</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>agolev</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2004-03-17T12:08:00Z</o:Created>
  <o:LastSaved>2004-03-17T12:08:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>3780</o:Words>
  <o:Characters>21552</o:Characters>
  <o:Company>PU</o:Company>
  <o:Lines>179</o:Lines>
  <o:Paragraphs>50</o:Paragraphs>
  <o:CharactersWithSpaces>25282</o:CharactersWithSpaces>
  <o:Version>10.3501</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:HyphenationZone>21</w:HyphenationZone>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0cm;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:595.3pt 841.9pt;
	margin:70.85pt 57.6pt 70.85pt 57.6pt;
	mso-header-margin:35.4pt;
	mso-footer-margin:35.4pt;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body lang=BG style='tab-interval:35.4pt'>

<div class=Section1>

<p class=MsoPlainText><span lang=RU style='mso-ansi-language:RU'>Bash Scripting
Tutorial<br>
<br>
<br>
Съдържание<br>
1. Увод<br>
2. Hello, World script<br>
3. Променливи<br>
4. Вход от потребителя (user input), оператора &lt;&lt;, аритментични
операции<br>
5. Условия (if-then-else, elif, case)<br>
6. Цикли (while, until, for, for-in)<br>
7. Пренасочване и канали<br>
8. Структурата trap<br>
9. Масиви<br>
10. Функции<br>
11. Цветове<br>
12. Използвана литература<br>
<br>
[--- Увод ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Всички UNIX системи поддържат голям
брой програмни езици, позволяващи на потребителите да си <br>
правят свои собсвени програми. Всички дистрибуции имат поддръжка за
програмиране за множество<br>
командни интерпретатори, езици от по-високо ниво като Perl и Tcl/TK и GUI
програмиране за графични<br>
среди като KDE и GNOME.<br>
<span style='mso-spacerun:yes'>    </span>Най-често използваните обвивки
(shells) са:<br>
<br>
<span style='mso-tab-count:1'>      </span>bash - bourne again shell<br>
<span style='mso-tab-count:1'>      </span>sh<span style='mso-spacerun:yes'>  
</span>- shell<br>
<span style='mso-tab-count:1'>      </span>csh<span style='mso-spacerun:yes'> 
</span>- C shell<br>
<span style='mso-tab-count:1'>      </span>tcsh - Tenex C shell (C shell без
поддръжка на tab-completion)<br>
<span style='mso-tab-count:1'>      </span>zsh<span style='mso-spacerun:yes'> 
</span>- Z shell<br>
<span style='mso-tab-count:1'>      </span>ksh<span style='mso-spacerun:yes'> 
</span>- Korn Shell<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да прочетете повече за всяка
от тях в техните manual pages. В този tutorial ще се зани-<br>
маваме с програмиране за bash. Една програма за bash комбинира UNIX командите
по даден<br>
начин, за да изпълни определена задача. Програмата за bash представлява текстов
файл, съдържащ<br>
команди, които можете да въведете със най-обикновен текстов редактор като pico,
vi и др. Този<br>
текстов файл се нарича скрипт за обвивката.<br>
<br>
###########################################################<br>
<br>
[--- Hello, World script ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Отворете любимия си текстов редактор
и въведете<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<span style='mso-tab-count:1'>      </span>echo &quot;Hello, World&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>за да направите традиционния Hello,
World script. Можете да стартирате скрипта като напишете<br>
точка (.) пред името на файла. Ако файлът се казва hello, командата би
изглеждала така:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ . hello<br>
<span style='mso-tab-count:1'>      </span>Hello, World<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Другият начин е да направите скрипта
изпълним:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ chmod +x hello<br>
<br>
<span style='mso-spacerun:yes'>    </span>и да го стартирате с:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./hello<br>
<span style='mso-tab-count:1'>      </span>Hello, World<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>По-нататък в tutorial-a ще използваме
втория начин.<br>
<span style='mso-spacerun:yes'>    </span>Скриптът hello съдържа два реда.
Първия ред казва на системата коя програма да ползва, за да<br>
прочете командите във файла, а втория изкарва на екрана Hello, World.<br>
<span style='mso-spacerun:yes'>    </span>Можете да въвеждате коментари в
скриптовете си чрез знака &quot;#&quot;.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<span style='mso-tab-count:1'>      </span># Това е коментар<br>
<span style='mso-tab-count:1'>      </span>echo &quot;Hello, World&quot; # Това
също<br>
<br>
###########################################################<br>
<br>
[--- Променливи ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>За да присвоите някаква стойност на
променлива трябва да използвате оператора за присвояване<br>
(знака за равенство (=)). Въведете името на променливата, знака за равенство и
след това стойността й.<br>
Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>num=10<br>
<br>
<span style='mso-spacerun:yes'>    </span>Обърнете внимание, че не трябва да
използвате интервали около оператора за присвояване. Ако<br>
сложите интервал след него (num= 10), bash ще се опита да изпълни команда
&quot;num=&quot; с аргумент 10.<br>
<span style='mso-spacerun:yes'>    </span>Можете да се обърнете към стойността
на променлива чрез знака за долар ($). Ето как би изглеждал<br>
скриптът Hello, World ако използваме променливи:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>var=&quot;Hello, World&quot;<br>
<span style='mso-tab-count:1'>      </span>echo $var<br>
<br>
<span style='mso-spacerun:yes'>    </span>Въпреки че стойностите на
променливите могат да бъдат произволни символи, ако включите символи,<br>
които се използват от обвивката, възникват проблеми. Тези символи са: интервал,
точка (.), знак за<br>
долар ($), по-голямо (&gt;) и по-малко (&lt;), (|), (&amp;), (*), ({) и (}).
Тези знаци могат да се използват<br>
като стойност на променлива ако са поставени в двойни или единични кавички или
с обратно наклонени<br>
черти. С двойни кавички можете да използвате всички запазени знаци без знака за
долар ($). За да го<br>
включите в стойността на променливата можете да използвате обратно наклонена
черта преди него (\$)<br>
или да оградите стойността на променливата с единични кавички. Следващия пример
илюстрира всичко<br>
описано до сега.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>num1=10<br>
<span style='mso-tab-count:1'>      </span>num2=20<br>
<span style='mso-tab-count:1'>      </span>msg1=&quot;$num1 &lt; $num2 &amp;
$num2 &gt; $num1&quot; # Тук ще се покажат всички знаци без знака за
долар,<br>
<span style='mso-spacerun:yes'>                   </span><span
style='mso-tab-count:3'>                </span><span
style='mso-spacerun:yes'>     </span># който използваме за да се обърнем към
стойността на<br>
<span style='mso-spacerun:yes'>                   </span><span
style='mso-tab-count:3'>                </span><span
style='mso-spacerun:yes'>     </span># променливата.<br>
<span style='mso-tab-count:1'>      </span>echo $msg1<br>
<br>
<span style='mso-tab-count:1'>      </span>msg2=&quot;\$100 &gt; \$10&quot; #
Тук използваме обратно наклонена черта за да покажем знака за долар<br>
<span style='mso-tab-count:1'>      </span>echo $msg2<br>
<br>
<span style='mso-tab-count:1'>      </span>msg3='Here we can use all of these
symbols: &quot;.&quot;, &quot;&gt;&quot;, &quot;&lt;&quot;, &quot;|&quot;,
&quot;$&quot;, etc'<br>
<span style='mso-tab-count:1'>      </span># по този начин всички знаци ще се
покажат на екрана, единственият символ, който не може да<br>
<span style='mso-tab-count:1'>      </span># се използва е единична кавичка
(')<br>
<span style='mso-tab-count:1'>      </span>echo $msg3<br>
<br>
<span style='mso-tab-count:1'>      </span># При всички примери по-горе не е
нужно стрингът да се слага в променлива.<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;&quot;\$msg1&quot; is not
needed to print '$num1 &lt; $num2 &amp; $num2 &gt; $num1'&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer1<br>
<span style='mso-tab-count:1'>      </span>10 &lt; 20 &amp; 20 &gt; 10<br>
<span style='mso-tab-count:1'>      </span>$100 &gt; $10<br>
<span style='mso-tab-count:1'>      </span>Here we can use all of these
symbols: &quot;.&quot;, &quot;&gt;&quot;, &quot;&lt;&quot;, &quot;|&quot;,
&quot;$&quot;, etc<br>
<span style='mso-tab-count:1'>      </span>$msg1 is not needed to print '10
&lt; 20 &amp; 20 &gt; 10'<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>За да присвоите на някоя променлива
резултата от изпълнението на някаква команда, трябва да<br>
оградите командата в обратно наклонени апострофи.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>lsvar=`ls ~`<br>
<span style='mso-tab-count:1'>      </span>echo $lsvar<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer2<br>
<span style='mso-tab-count:1'>      </span>books docs ircd movies source work
phun stuff<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Ако поставите команда в единични
кавички след това можете да използвате името на тази променлива<br>
като друго име на командата.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>lssrc=`ls ~/source/c`<br>
<span style='mso-tab-count:1'>      </span>$lssrc<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer3<br>
<span style='mso-tab-count:1'>      </span>me0w.c m00.c<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>За да използвате резултата от
изпълнението на команда в стринг или променлива трябва да заградите<br>
командата в скоби и да поставите знака за долар пред нея ($(ls)).<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;The date is
$(date)&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer4<br>
<span style='mso-tab-count:1'>      </span>The date is пн юни 10 20:36:49 UTC
2002<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>В bash има и няколко специални
променливи, които се използват за аргументите на скрипта за обвивката.<br>
<br>
<span style='mso-tab-count:1'>      </span>$0<span
style='mso-spacerun:yes'>       </span>- име на команда<br>
<span style='mso-tab-count:1'>      </span>$1 до $9 - аргументите на
скрипта<br>
<span style='mso-tab-count:1'>      </span>$*<span
style='mso-spacerun:yes'>       </span>- всички аргументи от командния
ред<br>
<span style='mso-tab-count:1'>      </span>$@<span
style='mso-spacerun:yes'>       </span>- всички аргументи от командния ред
поотделно<br>
<span style='mso-tab-count:1'>      </span>$#<span
style='mso-spacerun:yes'>       </span>- броят на аргументите от командния ред<br>
<br>
<span style='mso-spacerun:yes'>    </span>Ще разберете разликата между $* и $@
след като прочетете за контролната структура for-in. Погледнете<br>
долния пример за по-голяма яснота за специалните променливи.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;The first argument is $1,
the second $2&quot;<br>
<span style='mso-tab-count:1'>      </span>echo &quot;All arguments you
entered: $*&quot;<br>
<span style='mso-tab-count:1'>      </span>echo &quot;There are $#
arguments&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer5 arg1 arg2 arg3
arg4<br>
<span style='mso-tab-count:1'>      </span>The first argument is arg1, the
second arg2<br>
<span style='mso-tab-count:1'>      </span>All arguments you entered: arg1 arg2
arg3 arg4<br>
<span style='mso-tab-count:1'>      </span>There are 4 arguments<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Ако изпълните друг скрипт от текущо
изпълняващият се, текущият скрипт спира изпълненитето си и предава<br>
контрола на другия. След изпълнението му се продължава първия скрипт. При този
случай всички променливи, <br>
дефинирани в първия скрипт не могат да се използват във втория. Но ако
експортирате променливите от <br>
първия те ще могат да се използват във втория. Това става с командата
export.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span># Това е първият файл.<br>
<br>
<span style='mso-tab-count:1'>      </span>var=100<br>
<span style='mso-tab-count:1'>      </span>export var<br>
<span style='mso-tab-count:1'>      </span>./primer6-a<br>
<br>
<span style='mso-tab-count:1'>      </span># EOF<br>
<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span># Вторият файл.<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;The value of var is
$var&quot;<br>
<br>
<span style='mso-tab-count:1'>      </span># EOF<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта (обърнете
внимание че вторият файл трябва да е primer6-a, ако използвате друго<br>
име, сменете името на файла в първия скрипт).<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer6<br>
<span style='mso-tab-count:1'>      </span>The value of var is 100<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Друг начин за деклариране на променливи
е командата declare. Синтаксисът на тази команда е:<br>
<br>
<span style='mso-tab-count:1'>      </span>declare -тип
име-на-променливата<br>
<br>
<span style='mso-spacerun:yes'>    </span>Типовете променливи са:<br>
<br>
<span style='mso-tab-count:1'>      </span>-r<span style='mso-spacerun:yes'>  
</span>- readonly<br>
<span style='mso-tab-count:1'>      </span>-i<span style='mso-spacerun:yes'>  
</span>- integer (цяло число)<br>
<span style='mso-tab-count:1'>      </span>-а<span style='mso-spacerun:yes'>  
</span>- array (масив)<br>
<span style='mso-tab-count:1'>      </span>-x<span style='mso-spacerun:yes'>  
</span>- export<br>
<br>
<span style='mso-spacerun:yes'>    </span>Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>declare -i var # декларираме
променлива от тип integer<br>
<span style='mso-tab-count:1'>      </span>var=100<br>
<span style='mso-tab-count:1'>      </span>echo $var<br>
<span style='mso-tab-count:1'>      </span>declare -r var2=123.456 #
декларираме readonly променлива<br>
<span style='mso-tab-count:1'>      </span>echo $var2<br>
<span style='mso-tab-count:1'>      </span>var2=121.343 # опитваме се да
променим стойността на var2<br>
<span style='mso-tab-count:1'>      </span>echo $var2<span
style='mso-spacerun:yes'>   </span># стойността на var2 ще е все още
123.456<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer7<br>
<span style='mso-tab-count:1'>      </span>100<br>
<span style='mso-tab-count:1'>      </span>123.456<br>
<span style='mso-tab-count:1'>      </span>bash: var2: readonly variable<br>
<span style='mso-tab-count:1'>      </span>123.456<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Повече информация можете да видите в
bash manual pages (man bash).<br>
<br>
###########################################################<br>
<br>
[--- User input, &lt;&lt;, аритметични операции ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>За да четете входни данни от вашия
script трябва да използвате командата read. В нея няма нищо трудно,<br>
но все пак вижте примера:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter a string:
&quot;<br>
<span style='mso-tab-count:1'>      </span>read str<br>
<span style='mso-tab-count:1'>      </span>echo &quot;String you entered:
$str&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer8<br>
<span style='mso-tab-count:1'>      </span>Enter a string: hello<br>
<span style='mso-tab-count:1'>      </span>String you entered: hello<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>С оператора &lt;&lt; можете да
предавате данни на някоя команда. След него трябва да поставите свой
ограничител,<br>
който представлява някаква дума (пр. EOF) и след данните трябва да поставите
същата дума. Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>cat &lt;&lt; EOF<br>
<span style='mso-tab-count:1'>      </span>sth<br>
<span style='mso-tab-count:1'>      </span>data<br>
<span style='mso-tab-count:1'>      </span>line<br>
<span style='mso-tab-count:1'>      </span>EOF<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer9<br>
<span style='mso-tab-count:1'>      </span>sth<br>
<span style='mso-tab-count:1'>      </span>data<br>
<span style='mso-tab-count:1'>      </span>line<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Командата let в bash се използва за
аритметични операции. С нея можете да сравните две стойности или да<br>
извършвате различни операции като събиране и умножение. Тези операции често се
използват за управление на<br>
контролни структури (например цикъла for, за който ще прочетете по-нататък) или
за извършване на изчисления.<br>
Синтаксисът на командата е показан по-долу:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ let value1 operator value2<br>
<br>
<span style='mso-spacerun:yes'>    </span>Освен този синтаксис можете да
използвате двойни скоби.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ (( value1 operator value2 ))<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да използвате направо
операторите за аритметични операции ако и двете променливи са от един и
същи<br>
тип (например integer). Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter the first
number: &quot;<br>
<span style='mso-tab-count:1'>      </span>read var1<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter the second:
&quot;<br>
<span style='mso-tab-count:1'>      </span>read var2<br>
<span style='mso-tab-count:1'>      </span>declare -i var3<br>
<br>
<span style='mso-tab-count:1'>      </span>echo ----------<br>
<span style='mso-tab-count:1'>      </span>echo &quot;$var1 + $var2 = $((
$var1+$var2 ))&quot; # тук използваме двойни скоби, както виждате трябва да
сложим $ пред<br>
<span style='mso-tab-count:7'>                                         </span><span
style='mso-spacerun:yes'>             </span># израза, за да се изчисли<br>
<span style='mso-tab-count:1'>      </span>let res=$var1*var2<br>
<span style='mso-tab-count:1'>      </span>echo &quot;$var1 * $var2 =
$res&quot;<br>
<span style='mso-tab-count:1'>      </span>var3=100<br>
<span style='mso-tab-count:1'>      </span>var3=$var3+10<br>
<span style='mso-tab-count:1'>      </span>echo &quot;$var3&quot; # тъй като
тази променлива е декларирана като integer не е нужно да използваме командата
let<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer10<br>
<span style='mso-tab-count:1'>      </span>Enter the first number: 10<br>
<span style='mso-tab-count:1'>      </span>Enter the second: 3<br>
<span style='mso-tab-count:1'>      </span>----------<br>
<span style='mso-tab-count:1'>      </span>10 + 3 = 13<br>
<span style='mso-tab-count:1'>      </span>10 * 3 = 30<br>
<span style='mso-tab-count:1'>      </span>110<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да използвате всеки от
изброените по-долу оператори с командата let.<br>
<br>
<span style='mso-tab-count:1'>      </span>+<span style='mso-tab-count:1'>     </span>-
събиране<br>
<span style='mso-tab-count:1'>      </span>-<span style='mso-tab-count:1'>     </span>-
изваждане<br>
<span style='mso-tab-count:1'>      </span>*<span style='mso-tab-count:1'>     </span>-
умножение<br>
<span style='mso-tab-count:1'>      </span>/<span style='mso-tab-count:1'>     </span>-
деление<br>
<span style='mso-tab-count:1'>      </span>%<span style='mso-tab-count:1'>     </span>-
остатък при деление<br>
<span style='mso-tab-count:1'>      </span>&gt;<span style='mso-tab-count:1'>     </span>-
по-голямо<br>
<span style='mso-tab-count:1'>      </span>&lt;<span style='mso-tab-count:1'>     </span>-
по-малко<br>
<span style='mso-tab-count:1'>      </span>&gt;=<span style='mso-tab-count:
1'>    </span>- по-голяма или равно<br>
<span style='mso-tab-count:1'>      </span>&lt;=<span style='mso-tab-count:
1'>    </span>- по-малко или равно<br>
<span style='mso-tab-count:1'>      </span>==<span style='mso-tab-count:1'>    </span>-
равно<br>
<span style='mso-tab-count:1'>      </span>!=<span style='mso-tab-count:1'>    </span>-
не е равно<br>
<span style='mso-tab-count:1'>      </span>&amp;<span style='mso-tab-count:
1'>     </span>- логическо И (AND)<br>
<span style='mso-tab-count:1'>      </span>|<span style='mso-tab-count:1'>     </span>-
логическо ИЛИ (OR)<br>
<span style='mso-tab-count:1'>      </span>!<span style='mso-tab-count:1'>     </span>-
логическо НЕ (NOT)<br>
<br>
<span style='mso-spacerun:yes'>    </span>За аритметични операции и сравняване
можете да използвате командата expr, но тук няма да я описвам. За повече<br>
информация вижте нейната документация. За да правите по-точни изчисления
използвайте езика bc<br>
(http://www.gnu.org/software/bc/bc.html).<br>
<br>
###########################################################<br>
<br>
[--- Условия ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>В тази част ще се запознаем с
контролните структури за условия. Много от тях са подобни на структурите в
другите<br>
езици, но въпреки това има някои разлики. Условията често изискват да се
изпълни някаква проверка, която сравнява<br>
две стойности. Тази проверка се извършва чрез командата test. Синтаксисът на
командата е показан тук:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ test value1 -option value2<br>
<span style='mso-tab-count:1'>      </span>$ test string operator string<br>
<br>
<span style='mso-spacerun:yes'>    </span>Обърнете внимание, че при сравняване
на стрингове се използва оператор, а не опция. Вместо командата test можете<br>
да използвате квадратни скоби ( [ и ] ). Командата test $var -eq 1 може да се
запише така:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ [ $var -eq 1 ]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Резултатът от командата test се
запазва в специалната променлива $?. Ако той е true, то $? е равна на нула, ако
е<br>
false то $? е равна на едно. (В променливата $? всъщност се съхранява изходния
код на програмата, която е изпълнена.<br>
Ако тя е завършила успешно то той е 0, ако не, той е друго число. При командата
test, ако резултатът е true тя спира<br>
с изходен код 0, ако е false с 1) Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>var1=10<br>
<span style='mso-tab-count:1'>      </span>var2=&quot;m000&quot;<br>
<span style='mso-tab-count:1'>      </span>[ $var1 -eq 10 ]<br>
<span style='mso-tab-count:1'>      </span>echo $?<br>
<span style='mso-tab-count:1'>      </span>[ $var2 = &quot;me0w&quot; ]<br>
<span style='mso-tab-count:1'>      </span>echo $?<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer11<br>
<span style='mso-tab-count:1'>      </span>0<br>
<span style='mso-tab-count:1'>      </span>1<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Най-често използваните оператори и
опции в test:<br>
<span style='mso-spacerun:yes'>    </span><br>
<span style='mso-tab-count:1'>      </span>Сравняване за цели числа<span
style='mso-spacerun:yes'>          </span>Функция<br>
<span style='mso-tab-count:1'>      </span>-gt (greater than)<span
style='mso-spacerun:yes'>                </span>По-голямо от<br>
<span style='mso-tab-count:1'>      </span>-lt (less than)<span
style='mso-spacerun:yes'>                   </span>По-малко от<br>
<span style='mso-tab-count:1'>      </span>-ge (greater or equal)<span
style='mso-spacerun:yes'>            </span>По-голямо или равно<br>
<span style='mso-tab-count:1'>      </span>-le (less or equal)<span
style='mso-spacerun:yes'>               </span>По-малко или равно<br>
<span style='mso-tab-count:1'>      </span>-eq (equal)<span
style='mso-spacerun:yes'>                       </span>Равно<br>
<span style='mso-tab-count:1'>      </span>-ne (not equal)<span
style='mso-spacerun:yes'>                   </span>Неравно<br>
<span style='mso-tab-count:1'>      </span>Сравняване на стрингове<br>
<span style='mso-tab-count:1'>      </span>-z<span
style='mso-spacerun:yes'>                                </span>Проверява за
празен стринг<br>
<span style='mso-tab-count:1'>      </span>=<span
style='mso-spacerun:yes'>                                 </span>Равни
стрингове<br>
<span style='mso-tab-count:1'>      </span>!=<span style='mso-tab-count:4'>                      </span><span
style='mso-spacerun:yes'>  </span>Неравни стрингове<br>
<span style='mso-tab-count:1'>      </span>Проверки за файлове<br>
<span style='mso-tab-count:1'>      </span>-f <span style='mso-tab-count:4'>                     </span><span
style='mso-spacerun:yes'>  </span>Файлът съществува<br>
<span style='mso-tab-count:1'>      </span>-s<span style='mso-tab-count:4'>                      </span><span
style='mso-spacerun:yes'>  </span>Файлът не е празен<br>
<span style='mso-tab-count:1'>      </span>-r<span style='mso-tab-count:4'>                      </span><span
style='mso-spacerun:yes'>  </span>Файлът може да се чете<br>
<span style='mso-tab-count:1'>      </span>-w<span style='mso-tab-count:4'>                      </span><span
style='mso-spacerun:yes'>  </span>Във файлът може да се записва<br>
<span style='mso-tab-count:1'>      </span>-x<span style='mso-tab-count:4'>                      </span><span
style='mso-spacerun:yes'>  </span>Файлът може да се изпълнява<br>
<br>
<span style='mso-spacerun:yes'>    </span>Има много повече опции, но тук няма
да ги описвам. Можете да прочетете за тях в test manual pages (man test).<br>
<br>
<span style='mso-spacerun:yes'>    </span>Условието if проверява изходното
състояние на команда. Ако то е нула командите в структурата се изпълняват. <br>
Ако е нещо различно от нула командите в структурата не се изпълняват. Всяка if
структура завършва с ключова дума <br>
fi и всяка case структура завършва с esac. Контролните структури за условие:<br>
<br>
<span style='mso-tab-count:1'>      </span>if команда then<span
style='mso-tab-count:4'>                    </span>Втората командата се
изпълнява ако изходното състояние на първата<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<span style='mso-spacerun:yes'>                              
</span>команда е 0.<br>
<span style='mso-spacerun:yes'>        </span>fi<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>if команда then<span
style='mso-tab-count:4'>                    </span>Ако изходното състояние е 0
се изпълнява командата в if, ако е <br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<span style='mso-tab-count:4'>                    </span>някакво
друго число се изпълнява командата в else.<br>
<span style='mso-tab-count:1'>      </span>else<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<br>
<span style='mso-tab-count:1'>      </span>fi<br>
<br>
<span style='mso-tab-count:1'>      </span>if команда then<span
style='mso-tab-count:4'>                    </span>elif ви позволява да
проверявате няколко ситуации в една if структура.<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<br>
<span style='mso-tab-count:1'>      </span>elif команда then<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<br>
<span style='mso-tab-count:1'>      </span>else<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда<br>
<span style='mso-tab-count:1'>      </span>fi<br>
<br>
<span style='mso-tab-count:1'>      </span>case стринг in<span
style='mso-tab-count:4'>                     </span>case търси съвпадение на
стринга с някои от шаблоните, ако няма такова<br>
<span style='mso-tab-count:1'>      </span>шаблон)<span style='mso-tab-count:
5'>                            </span>се изпълняват командите по подразбиране
(не е задължително да има такива.<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда;;<br>
<span style='mso-tab-count:1'>      </span>*)<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'> 
</span>команда по подразбиране;;<br>
<span style='mso-tab-count:1'>      </span>esac<br>
<br>
<span style='mso-spacerun:yes'>        </span>команда &amp;&amp; команда<span
style='mso-spacerun:yes'>                      </span>логическо И (AND)<br>
<br>
<span style='mso-spacerun:yes'>        </span>команда || команда<span
style='mso-spacerun:yes'>                      </span>логическо ИЛИ (OR)<br>
<br>
<span style='mso-spacerun:yes'>        </span>!команда<span
style='mso-spacerun:yes'>                                </span>логическо НЕ
(NOT)<br>
<br>
<span style='mso-spacerun:yes'>    </span>По-долу са показани примери с горните
условия:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter a string: &quot;<br>
<span style='mso-tab-count:1'>      </span>read str1<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter a string:
&quot;<br>
<span style='mso-tab-count:1'>      </span>read str2<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter a number:
&quot;<br>
<span style='mso-tab-count:1'>      </span>read num1<br>
<br>
<span style='mso-tab-count:1'>      </span>if [ $str1 == &quot;m000&quot; ];
then<span style='mso-spacerun:yes'>  </span># ';' се използва за да може then
да е на същия ред<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;str1 = m000&quot;<br>
<span style='mso-tab-count:1'>      </span>elif [ $str1 == &quot;m000&quot; ]
&amp;&amp; [ $str2 == &quot;m000&quot; ]; then # логическо И, т.е. echo
&quot;str1 and str2 = m000&quot; ще се<br>
<span style='mso-tab-count:7'>                                         </span><span
style='mso-spacerun:yes'>      </span># изпълни ако и двете условия са
true<br>
<span style='mso-spacerun:yes'>           </span>echo &quot;str1 and str2 =
m000&quot;<br>
<span style='mso-spacerun:yes'>        </span>else<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;str1 and str2 != m000&quot;<br>
<span style='mso-spacerun:yes'>        </span>fi<br>
<br>
<span style='mso-tab-count:1'>      </span>if [ -f &quot;/etc/passwd&quot; ];
then # пример с файлове<br>
<span style='mso-spacerun:yes'>           </span>cat /etc/passwd<br>
<span style='mso-spacerun:yes'>        </span>fi <br>
<br>
<span style='mso-tab-count:1'>      </span>if [ $num1 -eq 10 ]; then<br>
<span style='mso-spacerun:yes'>           </span>echo &quot;num1 =
10&quot;<br>
<span style='mso-tab-count:1'>      </span>elif [ $num1 -gt 100 ]; then<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;num1 &gt; 100&quot;<br>
<span style='mso-tab-count:1'>      </span>else <br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;?!?&quot;<br>
<span style='mso-tab-count:1'>      </span>fi<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer12<br>
<span style='mso-tab-count:1'>      </span>Enter a string: m000<br>
<span style='mso-tab-count:1'>      </span>Enter a string: m000<br>
<span style='mso-tab-count:1'>      </span>Enter a number: 10<br>
<span style='mso-tab-count:1'>      </span>str1 = m000<br>
<span style='mso-tab-count:1'>      </span>root:x:0:0::/root:/bin/bash<br>
<span style='mso-tab-count:1'>      </span>bin:x:1:1:bin:/bin:<br>
<span style='mso-tab-count:1'>      </span>daemon:x:2:2:daemon:/sbin:<br>
<span style='mso-tab-count:1'>      </span>adm:x:3:4:adm:/var/log:<br>
<span style='mso-tab-count:1'>      </span>nobody:x:99:99:nobody:/:<br>
<span style='mso-tab-count:1'>      </span>sftp:x:1000:100:,,,:/home/sftp:/bin/bash<br>
<span style='mso-tab-count:1'>      </span>num1 = 10<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да пробвате скрипта като
въвеждате други стойности. Един пример за case:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter an option (l, s
or al): &quot;<br>
<span style='mso-tab-count:1'>      </span>read opt<br>
<br>
<span style='mso-tab-count:1'>      </span>case $opt in<br>
<span style='mso-tab-count:1'>      </span>l)<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>ls -l;;<br>
<span style='mso-tab-count:1'>      </span>s)<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>ls -s;;<br>
<span style='mso-tab-count:1'>      </span>al)<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>ls -al;;<br>
<span style='mso-tab-count:1'>      </span>*) # ако $opt не съвпада с никоя от
горните опции<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>ls;;<br>
<span style='mso-spacerun:yes'>        </span>esac<br>
<br>
<span style='mso-tab-count:1'>      </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer13<br>
<span style='mso-tab-count:1'>      </span>Enter an option (l, s or al):
l<br>
<span style='mso-tab-count:1'>      </span>total 964<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>   </span>33 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 май 24 19:58
books<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>5 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 юни 12 19:35
docs<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>7 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 май<span
style='mso-spacerun:yes'>  </span>6 12:34 ircd<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>2 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 май 25 23:22
movies<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>7 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 май 17 11:56
phun<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>   </span>10 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 юни<span
style='mso-spacerun:yes'>  </span>8 15:54 source<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>2 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>  </span><span
style='mso-spacerun:yes'>      </span>4096 юни<span style='mso-spacerun:yes'> 
</span>1 15:27 stuff<br>
<span style='mso-tab-count:1'>      </span>drwxr-xr-x<span
style='mso-spacerun:yes'>    </span>2 sftp<span style='mso-spacerun:yes'>    
</span>users<span style='mso-spacerun:yes'>        </span>4096 юни 15 08:40
work<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Това е всичко за условията. Можете да
пробвате другите оператори и опции на test сами.<br>
<br>
###########################################################<br>
<br>
[--- Цикли ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Циклите се използват за повтаряне на
команди. Контролните структури за цикли са while, until, for и for-in.<br>
while и until проверяват резултата на някаква команда докато for и for-in
обхождат списък от стойности като<br>
присвояват всяка стойност на някаква променлива. Структурите за цикъл са
показани по-долу:<br>
<br>
<span style='mso-tab-count:1'>      </span>while команда do<span
style='mso-tab-count:3'>             </span>while изпълнява дадена команда
докато връщаната стойност от<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>команда<span style='mso-tab-count:3'>              </span><span
style='mso-spacerun:yes'>        </span>първата команда е 0 (true).<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-tab-count:1'>      </span>until команда do<span
style='mso-tab-count:3'>             </span>until изпълнява дадена команда докато
връщаната стойност от<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>команда<span style='mso-tab-count:4'>                   </span>първата
команда е 1 (false).<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-tab-count:1'>      </span>for променлива in списък от
стойности<span style='mso-spacerun:yes'>   </span>На променливата се присвоява
последователно всяка от стойностите<br>
<span style='mso-tab-count:1'>      </span>do<span style='mso-tab-count:5'>                           </span>в
списъка.<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>команда<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-tab-count:1'>      </span>for променлива<span
style='mso-tab-count:4'>                     </span>for е предназначен за
обръщане към аргументите на скрипта. На <br>
<span style='mso-spacerun:yes'> </span><span style='mso-tab-count:1'>     </span>do<span
style='mso-tab-count:5'>                           </span>променливата се
присвоява последователно всеки от аргументите.<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>команда<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>while изпълнява команди докато
изходната стойност на първата команда е 0. Края на цикъла се указва с
ключовата<br>
дума done.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>m00=yes<br>
<br>
<span style='mso-tab-count:1'>      </span>while [ $m00 == &quot;yes&quot; ];
do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo -n &quot;Enter a string: &quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>read str1<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;You entered: $str1&quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo -n &quot;Do you want to continue? &quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>read m00<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>Скриптът ще се изпълнява докато
въвеждате yes, при всяка друга стойност изпълнението спира защото връщаната<br>
стойност от [ $m00 == &quot;yes&quot; ] ще е 1 (false). Изпълнението на скрипта
е показано тук:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer14<br>
<span style='mso-tab-count:1'>      </span>Enter a string: asd<br>
<span style='mso-tab-count:1'>      </span>You entered: asd<br>
<span style='mso-tab-count:1'>      </span>Do you want to continue?<span
style='mso-spacerun:yes'>  </span>yes<br>
<span style='mso-tab-count:1'>      </span>Enter a string: asd1234123<br>
<span style='mso-tab-count:1'>      </span>You entered: asd1234123<br>
<span style='mso-tab-count:1'>      </span>Do you want to continue? no<br>
<span style='mso-tab-count:1'>      </span>$<br>
<span style='mso-spacerun:yes'>    </span>Един пример с until:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>m00=yes<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>until [ $m00 == &quot;no&quot; ];
do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo -n &quot;Enter a string: &quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>read str1<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;You entered: $str1&quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo -n &quot;Do you want to continue? &quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>read m00<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>Този скрипт извършва същата функция
като предния, само че се изпълнява докато [ $m00 == &quot;no&quot; ] e
false.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer15<br>
<span style='mso-tab-count:1'>      </span>Enter a string: me0w<br>
<span style='mso-tab-count:1'>      </span>You entered: me0w<br>
<span style='mso-tab-count:1'>      </span>Do you want to continue? yes<br>
<span style='mso-tab-count:1'>      </span>Enter a string: zmpf<br>
<span style='mso-tab-count:1'>      </span>You entered: zmpf<br>
<span style='mso-tab-count:1'>      </span>Do you want to continue? no<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>for-in се използва за обхождане на
списък от стойности като всяка от стойностите се присвоява последователно<br>
на променлива.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>for cfile in ~/source/c/*.c # това е
същото като for cfile in $( ls ~/source/c/*.c )<br>
<span style='mso-tab-count:1'>      </span>do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo $cfile<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer16<br>
<span style='mso-tab-count:1'>      </span>/home/sftp/source/c/a.c<br>
<span style='mso-tab-count:1'>      </span>/home/sftp/source/c/tmp.c<br>
<span style='mso-tab-count:1'>      </span>/home/sftp/source/c/zmpf.c<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>for e същото като for-in, но обхожда
аргументите на скрипта.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>for m00<br>
<span style='mso-tab-count:1'>      </span>do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo $m00<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>Тъй като аргументите на скрипта се
съхраняват в специалната променлива $@, горният скрипт може да се направи
и<br>
с for-in. <br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>for m00 in $@<br>
<span style='mso-tab-count:1'>      </span>do<span style='mso-tab-count:1'>    </span><br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo $m00<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer17 m00 me0w m33p zmpf lkmnp<br>
<span style='mso-tab-count:1'>      </span>m00<br>
<span style='mso-tab-count:1'>      </span>me0w<br>
<span style='mso-tab-count:1'>      </span>m33p<br>
<span style='mso-tab-count:1'>      </span>zmpf<br>
<span style='mso-tab-count:1'>      </span>lkmnp<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Има още няколко команди, които често
се използват в циклите. Това са командите true, false и breaк. Командата<br>
true има много проста функция - изходната й стойност е винаги 0. false е
същата, само че нейната изходна<br>
стойност е 1. break се използва за излизане от цикъла.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>declare -i var=0<br>
<br>
<span style='mso-tab-count:1'>      </span>while true; do # тъй като никога не
може условието да стане false цикълът е безкраен<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo -n $var<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>var=$var+1<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>if [ $var -eq 10 ]; then # ако $var е 10 цикълът се прекратява<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>     
</span>break <br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>fi<br>
<span style='mso-tab-count:1'>      </span>done<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>echo<br>
<span style='mso-tab-count:1'>      </span>echo bye<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да направите същия цикъл ако
използвате until и false единствената разлика е в реда: <br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>while true; do<br>
<br>
<span style='mso-spacerun:yes'>    </span>Трябва да е<br>
<br>
<span style='mso-tab-count:1'>      </span>until false; do<br>
<br>
###########################################################<br>
<br>
[--- Пренасочване и канализиране ---]<br>
<br>
<span style='mso-spacerun:yes'>   </span>Когато изпълнявате команда, тя изпраща
данните на стандартния изход (конзолата). Но можете да пренасочите данните и
<br>
към файл или примерно към stderr. Също така данните, които въвеждате могат да
се вземат от файл. Пренасочването на<br>
изходните данни се извършва с знака &gt; след командата. Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ echo m000 &gt; file<br>
<span style='mso-tab-count:1'>      </span>$ cat file<br>
<span style='mso-tab-count:1'>      </span>m000<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Ако искате да добавите данни към
съществуващ файл използвайте &gt;&gt;, защото &gt; изтрива предишното
съдържание на файла.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>nums=&quot;1 2 3&quot;<br>
<br>
<span style='mso-tab-count:1'>      </span>for num in $nums<br>
<span style='mso-tab-count:1'>      </span>do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo $num<br>
<span style='mso-tab-count:1'>      </span>done &gt; nums<br>
<br>
<span style='mso-spacerun:yes'>    </span>Горния скрипт ще пренасочи изходните
данни в файла nums.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./nums<br>
<span style='mso-tab-count:1'>      </span>$ cat nums<br>
<span style='mso-tab-count:1'>      </span>1<br>
<span style='mso-tab-count:1'>      </span>2<br>
<span style='mso-tab-count:1'>      </span>3<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Канализирането е подобно на
пренасочването, с тази разлика че изходните данни от една команда се предават
като входни<br>
на друга. Най-прост пример за канализиране е архивирането и дезархивирането с
tar и gzip.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ tar cvf - files/ | gzip -9 &gt;
files.tar.gz <br>
<br>
<span style='mso-spacerun:yes'>    </span>или<br>
<br>
<span style='mso-tab-count:1'>      </span>$ gzip -cd files.tar.gz | tar xvf
-<br>
<br>
<span style='mso-spacerun:yes'>    </span>Един пример с bash скрипт.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>names=&quot;Ivan Koljo Asen Sasho
Misho&quot;<br>
<br>
<span style='mso-tab-count:1'>      </span>for name in $names<br>
<span style='mso-tab-count:1'>      </span>do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo $name<br>
<span style='mso-tab-count:1'>      </span>done | sort &gt; names<br>
<br>
<span style='mso-spacerun:yes'>    </span>Скриптът предава изходните данни от
echo $name на командата sort и след това изходните данни от нея се пренасочват
във <br>
файла names.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./names<br>
<span style='mso-tab-count:1'>      </span>$ cat names<br>
<span style='mso-tab-count:1'>      </span>Asen<br>
<span style='mso-tab-count:1'>      </span>Ivan<br>
<span style='mso-tab-count:1'>      </span>Koljo<br>
<span style='mso-tab-count:1'>      </span>Misho<br>
<span style='mso-tab-count:1'>      </span>Sasho<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Както виждате имената са подредени по
азбучен ред тъй като изходните данни се предават на командата sort.<br>
<br>
<br>
###########################################################<br>
<br>
[--- Структурата trap ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Друг вид структура е trap. trap
изпълнява команда при някакво събитие. Тези събития се наричат сигнали.<br>
Тук е даден синтаксисът на командата trap.<br>
<br>
<span style='mso-tab-count:1'>      </span>$ trap 'команди'
номер-на-сигнала<br>
<br>
<span style='mso-spacerun:yes'>    </span>Един често използван сигнал е
сигналът за прекъсване (когато потребителят натисне CTRL+C).<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>trap 'echo &quot;Bye&quot;; exit 1'
2<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;Enter a string:
&quot;<br>
<span style='mso-tab-count:1'>      </span>read m00<br>
<span style='mso-tab-count:1'>      </span>echo &quot;nah&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./trap-ex<br>
<span style='mso-tab-count:1'>      </span>Enter a string:<br>
<span style='mso-tab-count:1'>      </span>^CBye<br>
<span style='mso-tab-count:1'>      </span>$<br>
<span style='mso-spacerun:yes'>   </span><br>
<span style='mso-spacerun:yes'>    </span>Както виждате след като натиснем
CTRL+C се изпълнява echo &quot;Bye&quot; след това exit 1, с което програмата
спира <br>
изпълнението си. Списък с различни номера на сигнали е показан тук:<br>
<br>
<span style='mso-tab-count:1'>      </span>0 Край на програмата<span
style='mso-spacerun:yes'>      </span>Програмата завършва<br>
<span style='mso-tab-count:1'>      </span>2 Терминално прекъсване<span
style='mso-spacerun:yes'>   </span>CTRL+C<br>
<span style='mso-tab-count:1'>      </span>9 kill<span
style='mso-spacerun:yes'>   </span><span style='mso-tab-count:2'>         </span><span
style='mso-spacerun:yes'>  </span>kill-ване на програмата, не може да се улови
с trap<br>
<span style='mso-tab-count:1'>      </span>24<span style='mso-tab-count:3'>                </span><span
style='mso-spacerun:yes'>  </span>Спиране на програмата с CTRL+Z, не може да се
улови<br>
<br>
<span style='mso-spacerun:yes'>     </span>Можете да видите повече номера на
сигнали за kill в kill manual pages.<br>
<br>
###########################################################<br>
<br>
[--- Масиви ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Масивът може да бъде инициализиран с
var[xx]=&quot;aa&quot;, където xx e някакво число или с командата declare -a
променлива.<br>
За да се обърнем към стойността на някой от елементите на масива трябва да го
заградим във фигурни скоби ('{' и '}').<br>
Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>array[1]=m00<br>
<span style='mso-tab-count:1'>      </span>array[34]=me0w<br>
<span style='mso-tab-count:1'>      </span>array[40]=123<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;array[1] =
${array[1]}&quot;<br>
<span style='mso-tab-count:1'>      </span>echo &quot;array[34] =
${array[34]}&quot;<br>
<span style='mso-tab-count:1'>      </span>echo &quot;array[40] =
${array[40]}&quot;<br>
<br>
<span style='mso-spacerun:yes'>    </span>Друг начин за присвояване на
стойности на елементите от масив е<br>
<br>
<span style='mso-tab-count:1'>      </span>array=( x y z ... )<br>
<br>
<span style='mso-spacerun:yes'>    </span>След това х ще бъде array[0]
(забележете първият елемент е 0 а не 1), y - array[1], z - array[2] и т.н.<br>
<br>
<span style='mso-spacerun:yes'>    </span>Един пример, демонстриращ повече
възможности на масивите:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>declare -a array # декларираме масив
с declare<br>
<br>
<span style='mso-tab-count:1'>      </span>echo -n &quot;Enter some numbers
separated by space: &quot;<br>
<span style='mso-tab-count:1'>      </span>read -a array # присвояваме
въведените числа на елементите на масива (забележете опцията на read '-a')<br>
<br>
<span style='mso-tab-count:1'>      </span>elements=${#array[@]} # тук
присвояваме на променливата elements броя елементи на масива<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span># ${array[@]} съдържа елементите на
масива поотделно. Можете да го използвате за цикъл for-in<br>
<span style='mso-tab-count:1'>      </span># например:<br>
<span style='mso-tab-count:1'>      </span># for i in ${array[@]; do<br>
<span style='mso-tab-count:1'>      </span>#<span style='mso-spacerun:yes'>   
</span>echo $i<br>
<span style='mso-tab-count:1'>      </span># done<br>
<br>
<span style='mso-tab-count:1'>      </span># сега ще покажем елементите на
масива с цикъл while<br>
<br>
<span style='mso-tab-count:1'>      </span>i=0<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>while [ $i -lt $elements ]; do<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo ${array[$i]}<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>let &quot;i = $i + 1&quot;<br>
<span style='mso-tab-count:1'>      </span>done<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;bye&quot;<br>
<br>
<span style='mso-spacerun:yes'>  </span><span
style='mso-spacerun:yes'>  </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer18<span style='mso-tab-count:
1'>      </span><br>
<span style='mso-tab-count:1'>      </span>Enter some numbers separated by
space: 1 13 14 88 19<br>
<span style='mso-tab-count:1'>      </span>1<br>
<span style='mso-tab-count:1'>      </span>13<br>
<span style='mso-tab-count:1'>      </span>14<br>
<span style='mso-tab-count:1'>      </span>88<br>
<span style='mso-tab-count:1'>      </span>19<br>
<span style='mso-tab-count:1'>      </span>bye<br>
<span style='mso-tab-count:1'>      </span>$<br>
<br>
<span style='mso-spacerun:yes'>    </span>Можете да видите много повече за
масивите (различни алгоритми за сортиране и др.) в Advanced Bash
Scripting<br>
(http://www.tldp.org/LDP/abs/html/arrays.html)<br>
<br>
###########################################################<br>
<br>
[--- Функции ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>Както в повече програмни езици и в
bash можете да използвате функции за да групирате няколко команди в една.<br>
Декларирането на функция става така:<br>
<br>
<span style='mso-tab-count:1'>      </span>име_на_функция { команди }<br>
<br>
или<br>
<span style='mso-tab-count:1'>      </span>име_на_функция() { команди }<br>
<br>
<span style='mso-spacerun:yes'>    </span>За да извикате функция просто трябва
да въведете нейното име.<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<br>
<span style='mso-tab-count:1'>      </span>func() {<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;Hello&quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;This is function&quot;<br>
<span style='mso-tab-count:1'>      </span>}<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>info() {<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;host uptime: $( uptime )&quot;<br>
<span style='mso-tab-count:1'>      </span><span style='mso-spacerun:yes'>  
</span>echo &quot;date: $( date )&quot;<br>
<span style='mso-tab-count:1'>      </span>}<br>
<span style='mso-tab-count:1'>      </span>func<br>
<span style='mso-tab-count:1'>      </span>info<br>
<br>
<span style='mso-tab-count:1'>      </span>echo &quot;That's all folks
:)&quot;<br>
<br>
<span style='mso-spacerun:yes'>   </span>Изпълнението на скрипта:<br>
<br>
<span style='mso-tab-count:1'>      </span>$ ./primer19<br>
<span style='mso-tab-count:1'>      </span>Hello<br>
<span style='mso-tab-count:1'>      </span>This is function<br>
<span style='mso-tab-count:1'>      </span>host uptime:<span
style='mso-spacerun:yes'>   </span>1:46pm<span style='mso-spacerun:yes'> 
</span>up 5 days, 14:39,<span style='mso-spacerun:yes'>  </span>1 user,<span
style='mso-spacerun:yes'>  </span>load average: 0.08, 0.05, 0.04<br>
<span style='mso-tab-count:1'>      </span>date: сб юни 15 13:46:23 UTC 2002<br>
<span style='mso-tab-count:1'>      </span>That's all folks :)<br>
<span style='mso-spacerun:yes'>        </span>$<br>
<br>
###########################################################<br>
<br>
[--- Цветове ---]<br>
<br>
<span style='mso-spacerun:yes'>    </span>И последната част от tutorial-a са
цветовете в bash. За да изкараме цветен текст ще използваме командата
printf.<br>
Цвета се определя с \e[X;XXm, където Х-овете са числа. Списъка с цветовете е
показан по-долу:<br>
<br>
<span style='mso-spacerun:yes'>       </span>Черно<span
style='mso-spacerun:yes'>       </span>0;30<span style='mso-spacerun:yes'>    
</span>Тъмно сиво<span style='mso-spacerun:yes'>         </span>1;30<br>
<span style='mso-spacerun:yes'>       </span>Синьо<span
style='mso-spacerun:yes'>       </span>0;34<span style='mso-spacerun:yes'>    
</span>Светло синьо<span style='mso-spacerun:yes'>       </span>1;34<br>
<span style='mso-spacerun:yes'>       </span>Зелено<span
style='mso-spacerun:yes'>      </span>0;32<span style='mso-spacerun:yes'>    
</span>Светло зелено<span style='mso-spacerun:yes'>      </span>1;32<br>
<span style='mso-spacerun:yes'>       </span>Cyan<span
style='mso-spacerun:yes'>        </span>0;36<span style='mso-spacerun:yes'>    
</span>Light Cyan<span style='mso-spacerun:yes'>         </span>1;36<br>
<span style='mso-spacerun:yes'>       </span>Червено<span
style='mso-spacerun:yes'>     </span>0;31<span style='mso-spacerun:yes'>    
</span>Светло червено<span style='mso-spacerun:yes'>     </span>1;31<br>
<span style='mso-spacerun:yes'>       </span>Лилаво<span
style='mso-spacerun:yes'>      </span>0;35<span style='mso-spacerun:yes'>    
</span>Светло лилаво<span style='mso-spacerun:yes'>      </span>1;35<br>
<span style='mso-spacerun:yes'>       </span>Кафяво<span
style='mso-spacerun:yes'>      </span>0;33<span style='mso-spacerun:yes'>    
</span>Жълто<span style='mso-spacerun:yes'>              </span>1;33<br>
<span style='mso-spacerun:yes'>       </span>Светло сиво 0;37<span
style='mso-spacerun:yes'>     </span>Бяло<span
style='mso-spacerun:yes'>               </span>1;37<br>
<span style='mso-spacerun:yes'>       </span>Изчиства екрана 2J (thanks zEAL)<br>
<br>
<span style='mso-spacerun:yes'>    </span>Пример:<br>
<br>
<span style='mso-tab-count:1'>      </span>#!/bin/bash<br>
<span style='mso-tab-count:1'>      </span><br>
<span style='mso-tab-count:1'>      </span>printf &quot;\e[2J&quot;<br>
<span style='mso-tab-count:1'>      </span>printf &quot;\e[0;34mblue\n&quot; #
\n е за нов ред<br>
<span style='mso-tab-count:1'>      </span>printf
&quot;\e[0;32mgreen\n&quot;<br>
<span style='mso-tab-count:1'>      </span>printf &quot;\e[0;37mand back to
default color ...\n&quot;<br>
<br>
###########################################################<br>
<br>
[--- Използвана литература ---]<br>
<br>
Linux Programming A Beginner's Guide (Richard Petersen)<br>
BASH Programming HOWTO -
http://www.tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html<br>
Advanced Bash-Scripting Guide - http://www.tldp.org/LDP/abs/html/<br>
<br>
<br>
<br>
----------------<br>
sftp<br>
<br>
<br>
<o:p>&nbsp;</o:p></span></p>

</div>

</body>

</html>
